
cuda is not avaiable.

==================================================
goal = test
device = cpu
device_id = 0
dataset = HAR
num_classes = 10
model = HARCNN
batch_size = 10
local_learning_rate = 0.01
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 100
top_cnt = 100
local_epochs = 10
algorithm = FedAvg
join_ratio = 0.5
random_join_ratio = False
num_clients = 20
prev = 0
times = 1
eval_gap = 1
save_folder_name = items
auto_break = False
dlg_eval = False
dlg_gap = 100
batch_num_per_client = 2
num_new_clients = 0
fine_tuning_epoch_new = 0
feature_dim = 512
vocab_size = 80
max_len = 200
few_shot = 0
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
beta = 0.0
lamda = 1.0
mu = 0.0
K = 5
p_learning_rate = 0.01
M = 5
itk = 4000
alphaK = 1.0
sigma = 1.0
alpha = 1.0
plocal_epochs = 1
tau = 1.0
fine_tuning_epochs = 10
dr_learning_rate = 0.0
L = 1.0
noise_dim = 512
generator_learning_rate = 0.005
hidden_dim = 512
server_epochs = 1000
localize_feature_extractor = False
server_learning_rate = 1.0
eta = 1.0
rand_percent = 80
layer_idx = 2
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
momentum = 0.1
kl_weight = 0.0
num_candidates = 0
method = RandomSelect
comment =
num_clients_per_round = 10
num_available = None
loss_div_sqrt = False
loss_sum = False
total_num_clients = 20
num_epoch = 10
wandb = True
==================================================

============= Running time: 0th =============
Creating server and clients ...
HARCNN(
  (conv1): Sequential(
    (0): Conv2d(9, 32, kernel_size=(1, 9), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(1, 2), stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv2): Sequential(
    (0): Conv2d(32, 64, kernel_size=(1, 9), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(1, 2), stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (fc): Sequential(
    (0): Linear(in_features=1664, out_features=1024, bias=True)
    (1): ReLU()
    (2): Linear(in_features=1024, out_features=512, bias=True)
    (3): ReLU()
    (4): Linear(in_features=512, out_features=10, bias=True)
  )
)
Initializing client selection method: RandomSelect

Join ratio / total clients: 0.5 / 20
Finished creating server and clients.

------------- Round 0-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 2.3169
Averaged Test Accurancy: 0.0000
Averaged Test AUC: 0.2801
Std Test Accurancy: 0.0000
Std Test AUC: 0.0148
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [1, 2, 4, 5, 7, 9, 11, 12, 17, 18]
------------------------- time cost ------------------------- 25.28911590576172

------------- Round 1-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.9963
Averaged Test Accurancy: 0.1589
Averaged Test AUC: 0.5450
Std Test Accurancy: 0.1827
Std Test AUC: 0.2660
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [3, 4, 5, 7, 10, 11, 12, 13, 15, 16]
------------------------- time cost ------------------------- 27.985007762908936

------------- Round 2-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.6848
Averaged Test Accurancy: 0.2792
Averaged Test AUC: 0.7067
Std Test Accurancy: 0.1925
Std Test AUC: 0.2459
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [2, 3, 4, 9, 11, 12, 13, 15, 18, 19]
------------------------- time cost ------------------------- 33.008519649505615

------------- Round 3-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.4226
Averaged Test Accurancy: 0.3954
Averaged Test AUC: 0.7626
Std Test Accurancy: 0.2562
Std Test AUC: 0.2402
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [1, 3, 8, 11, 12, 14, 15, 16, 17, 18]
------------------------- time cost ------------------------- 31.16564106941223

------------- Round 4-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.3200
Averaged Test Accurancy: 0.4335
Averaged Test AUC: 0.8148
Std Test Accurancy: 0.2074
Std Test AUC: 0.1793
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [3, 4, 5, 6, 8, 10, 13, 15, 16, 18]
------------------------- time cost ------------------------- 31.530853986740112

------------- Round 5-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.0638
Averaged Test Accurancy: 0.5360
Averaged Test AUC: 0.8562
Std Test Accurancy: 0.2310
Std Test AUC: 0.1328
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [2, 3, 5, 6, 7, 10, 11, 12, 17, 19]
------------------------- time cost ------------------------- 29.145615339279175

------------- Round 6-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 1.0276
Averaged Test Accurancy: 0.6117
Averaged Test AUC: 0.8753
Std Test Accurancy: 0.2494
Std Test AUC: 0.1339
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [2, 3, 4, 5, 6, 7, 10, 14, 15, 19]
------------------------- time cost ------------------------- 31.417335748672485

------------- Round 7-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 0.8639
Averaged Test Accurancy: 0.6670
Averaged Test AUC: 0.8887
Std Test Accurancy: 0.2479
Std Test AUC: 0.1352
--- Training 10 clients ---
> Aggregating models from 10 final selected clients.
> Selected client IDs for this round: [0, 1, 2, 3, 7, 10, 12, 14, 15, 18]
------------------------- time cost ------------------------- 32.54179072380066

------------- Round 8-------------
> Pre-training selection: choosing 10 clients.
> Sending global model to 10 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 0.5512
Averaged Test Accurancy: 0.7533
Averaged Test AUC: 0.9216
Std Test Accurancy: 0.2151
Std Test AUC: 0.0463
--- Training 10 clients ---
Traceback (most recent call last):
  File "C:\Program Files\Python37\lib\runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "C:\Program Files\Python37\lib\runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_latest\main.py", line 323, in <module>
    run(args, client_selection)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_latest\main.py", line 116, in run
    server.train()
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_latest\flcore\servers\serveravg.py", line 140, in train
    local_losses, accuracy, local_metrics = self.train_clients(clients_to_train)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_latest\flcore\servers\serverbase.py", line 445, in train_clients
    train_result = client.train()
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_latest\flcore\clients\clientavg.py", line 50, in train
    y = y.to(self.device)
KeyboardInterrupt
