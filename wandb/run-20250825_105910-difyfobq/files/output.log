
cuda is not avaiable.

==================================================
goal = test
device = cpu
device_id = 0
dataset = HAR
num_classes = 6
model = CNN
batch_size = 10
local_learning_rate = 0.01
learning_rate_decay = False
learning_rate_decay_gamma = 0.99
global_rounds = 60
top_cnt = 100
local_epochs = 10
algorithm = FedAvg
join_ratio = 0.25
random_join_ratio = False
num_clients = 20
prev = 0
times = 1
eval_gap = 1
save_folder_name = items
auto_break = False
dlg_eval = False
dlg_gap = 100
batch_num_per_client = 2
num_new_clients = 0
fine_tuning_epoch_new = 0
feature_dim = 512
vocab_size = 80
max_len = 200
few_shot = 0
client_drop_rate = 0.0
train_slow_rate = 0.0
send_slow_rate = 0.0
time_select = False
time_threthold = 10000
beta = 0.0
lamda = 1.0
mu = 0.0
K = 5
p_learning_rate = 0.01
M = 5
itk = 4000
alphaK = 1.0
sigma = 1.0
alpha = 1.0
plocal_epochs = 1
tau = 1.0
fine_tuning_epochs = 10
dr_learning_rate = 0.0
L = 1.0
noise_dim = 512
generator_learning_rate = 0.005
hidden_dim = 512
server_epochs = 1000
localize_feature_extractor = False
server_learning_rate = 0.1
eta = 1.0
rand_percent = 80
layer_idx = 2
mentee_learning_rate = 0.005
T_start = 0.95
T_end = 0.98
momentum = 0.1
kl_weight = 0.0
num_candidates = 10
method = AFL
comment = REDO
num_clients_per_round = 5
num_available = None
loss_div_sqrt = False
loss_sum = False
subset_ratio = 0.1
alpha1 = 0.75
alpha2 = 1
alpha3 = 0.1
save_probs = False
no_save_results = False
src_id = 1
imbalance_factor = 10.0
total_num_clients = 20
num_epoch = 10
wandb = True
==================================================

****** Client source: 1 *******
Accuracy of source client: 97.80%

============= Running time: 0th =============
Creating server and clients ...
CNN
Initializing client selection method: AFL
Pre-loading and preparing all client data...
INFO: Simulating imbalance with factor 10.0 for client 0 training data.
INFO: Simulating imbalance with factor 10.0 for client 1 training data.
INFO: Simulating imbalance with factor 10.0 for client 2 training data.
INFO: Simulating imbalance with factor 10.0 for client 3 training data.
INFO: Simulating imbalance with factor 10.0 for client 4 training data.
INFO: Simulating imbalance with factor 10.0 for client 5 training data.
INFO: Simulating imbalance with factor 10.0 for client 6 training data.
INFO: Simulating imbalance with factor 10.0 for client 7 training data.
INFO: Simulating imbalance with factor 10.0 for client 8 training data.
INFO: Simulating imbalance with factor 10.0 for client 9 training data.
INFO: Simulating imbalance with factor 10.0 for client 10 training data.
INFO: Simulating imbalance with factor 10.0 for client 11 training data.
INFO: Simulating imbalance with factor 10.0 for client 12 training data.
INFO: Simulating imbalance with factor 10.0 for client 13 training data.
INFO: Simulating imbalance with factor 10.0 for client 14 training data.
INFO: Simulating imbalance with factor 10.0 for client 15 training data.
INFO: Simulating imbalance with factor 10.0 for client 16 training data.
INFO: Simulating imbalance with factor 10.0 for client 17 training data.
INFO: Simulating imbalance with factor 10.0 for client 18 training data.
INFO: Simulating imbalance with factor 10.0 for client 19 training data.
Data loading complete.

Join ratio / total clients: 0.25 / 20
Finished creating server and clients.

------------- Round 0-------------
> Post-training selection enabled for method 'AFL'.
> Sending global model to 20 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 0.8225
Averaged Test Accurancy: 0.7609
Averaged Test AUC: 0.8797
Std Test Accurancy: 0.1663
Std Test AUC: 0.0932
--- Training 20 clients ---
> Post-training selection: choosing 5 from 20 trained clients.
>   (Using local losses as metric for AFL)
5 selected users: [ 7 19  0  1 13]
> Aggregating models from 5 final selected clients.
> Selected client IDs for this round: [0, 1, 7, 13, 19]
------------------------- time cost ------------------------- 1692.750163078308

------------- Round 1-------------
> Post-training selection enabled for method 'AFL'.
> Sending global model to 20 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 2.5157
Averaged Test Accurancy: 0.5213
Averaged Test AUC: 0.7936
Std Test Accurancy: 0.1232
Std Test AUC: 0.0992
--- Training 20 clients ---
> Post-training selection: choosing 5 from 20 trained clients.
>   (Using local losses as metric for AFL)
5 selected users: [ 8  3 10 14 18]
> Aggregating models from 5 final selected clients.
> Selected client IDs for this round: [3, 8, 10, 14, 18]
------------------------- time cost ------------------------- 1415.0536570549011

------------- Round 2-------------
> Post-training selection enabled for method 'AFL'.
> Sending global model to 20 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 2.3578
Averaged Test Accurancy: 0.4985
Averaged Test AUC: 0.8041
Std Test Accurancy: 0.1185
Std Test AUC: 0.0775
--- Training 20 clients ---
> Post-training selection: choosing 5 from 20 trained clients.
>   (Using local losses as metric for AFL)
5 selected users: [ 6  7 18  2 13]
> Aggregating models from 5 final selected clients.
> Selected client IDs for this round: [2, 6, 7, 13, 18]
------------------------- time cost ------------------------- 643.1618134975433

------------- Round 3-------------
> Post-training selection enabled for method 'AFL'.
> Sending global model to 20 clients for local training.

Evaluating global model before training...
Averaged Train Loss: 2.4913
Averaged Test Accurancy: 0.4599
Averaged Test AUC: 0.8012
Std Test Accurancy: 0.1062
Std Test AUC: 0.0678
--- Training 20 clients ---
Traceback (most recent call last):
  File "C:\Program Files\Python37\lib\runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "C:\Program Files\Python37\lib\runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\main.py", line 235, in <module>
    run(args, client_selection)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\main.py", line 145, in run
    server.train()
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\flcore\servers\serveravg.py", line 151, in train
    print(f"> Sending global model to {len(clients_for_training)} clients for local training.")
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\flcore\servers\serverbase.py", line 487, in train_clients
    train_result = client.train()
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\flcore\clients\clientavg.py", line 38, in train
    result=self.model.update(trainloader)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\flcore\algorithms\algorithms.py", line 113, in update
    trg_feat, _ = self.feature_extractor(trg_x)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\modules\module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\owner\Downloads\Benchmark_Stage_backup2\Benchmark_Stage\system_shot_imbalance\flcore\algorithms\models.py", line 47, in forward
    x = self.conv_block1(x_in)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\modules\module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\modules\container.py", line 119, in forward
    input = module(input)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\modules\module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\modules\batchnorm.py", line 140, in forward
    self.weight, self.bias, bn_training, exponential_average_factor, self.eps)
  File "C:\Users\owner\AppData\Roaming\Python\Python37\site-packages\torch\nn\functional.py", line 2147, in batch_norm
    input, weight, bias, running_mean, running_var, training, momentum, eps, torch.backends.cudnn.enabled
KeyboardInterrupt
